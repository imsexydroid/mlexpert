{
    "uid": "classify-trucks",
    "testStrategy": "DATA_PROCESSING",
    "name": "Classify Trucks",
    "version": 0,
    "releaseDate": "2021-05-24T00:00:00Z",
    "category": "Model Applications",
    "difficulty": 0,
    "acl": {
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "mlexpert"
        ],
        "isAvailable": true
    },
    "languagesSupported": [
        "python"
    ],
    "submissionStatistics": {
        "correctCount": 679,
        "failureCount": 382
    },
    "assessmentSummary": null,
    "video": {
        "vimeoId": "552659252",
        "duration": 0,
        "annotations": [],
        "instructor": "Ryan Doan",
        "overviewTime": 0,
        "codeWalkthroughTime": 263
    },
    "prompt": "<div class=\"html\">\n<p>\n  Create and return a convolutional neural network (CNN) to classify images\n  produced by a traffic-camera feed based on whether or not a truck is in the\n  images.\n</p>\n<p>Note that:</p>\n<ul>\n  <li>\n    You should use TensorFlow 2 Keras APIs to create a CNN that expects images\n    of dimensions <b>224x224</b> with 3 channels (Red, Green, and Blue).\n  </li>\n  <li>\n    The CNN should consist of <b>8</b> ordered layers:\n    <ol>\n      <li>\n        A convolutional layer with <b>16</b> filters, each with a kernel of\n        dimensions <b>3x3</b> and a Rectified Linear Unit (ReLU) activation\n        function.\n      </li>\n      <li>A max pooling layer with dimensions <b>2x2</b>.</li>\n      <li>\n        A convolutional layer with <b>32</b> filters, each with a kernel of\n        dimensions <b>3x3</b> and a ReLU activation function.\n      </li>\n      <li>Another max pooling layer with dimensions <b>2x2</b>.</li>\n      <li>\n        A convolutional layer with <b>64</b> ,filters each with a kernel of\n        dimensions <b>3x3</b> and a ReLU activation function.\n      </li>\n      <li>A layer to flatten the values of the previous layer.</li>\n      <li>\n        A dense layer (fully connected) with <b>20</b> neurons and a ReLU\n        activation function.\n      </li>\n      <li>\n        Finally, a dense layer with a single neuron and sigmoid activation. This\n        layer will output the prediction.\n      </li>\n    </ol>\n  </li>\n  <li>\n    Each convolutional and pooling layer should use valid padding, each layer\n    with a ReLU activation should use He normal initialization, and the layer\n    with a sigmoid activation should use Glorot normal initialization.\n  </li>\n  <li>\n    The CNN should use Adam as the optimizer with a learning rate of\n    <b>.01</b>. As well, binary cross-entropy should be used as the loss\n    function, since the label of each frame is <span>1</span> when there's a\n    truck in the image and <span>0</span> when there isn't a truck in the image.\n  </li>\n</ul>\n<p>\n  The following two images are example images that will be used to train your\n  model:\n</p>\n<img src=\"https://assets.algoexpert.io/mle/classify_trucks_with_truck.jpg\" />\n<img src=\"https://assets.algoexpert.io/mle/classify_trucks_without_truck.jpg\" />\n<p>\n  The first image would be labeled as <span>1</span>, since a truck is in the\n  image. Conversely, the second image would be labeled as <span>0</span>, since\n  there isn't a truck in the image.\n</p>\n<p>\n  The training will be handled for you. You're only required to return the model\n  with the above specifications. Be sure to include binary accuracy as the\n  metric to monitor during training.\n</p>\n</div>",
    "hints": [
        "<p>\n  First, we need to create a Sequential model provided by TensorFlow's\n  high-level API, Keras.\n</p>\n",
        "\n<p>\n  We can provide the Sequential model with a list of layers that we want to\n  include in the CNN.\n</p>\n",
        "\n<p>\n  The first layer will be a convolutional layer, which is availble in Keras as\n  <span>Conv2D</span>. We need to speciy the Rectified Linear Unit (ReLu)\n  activation function which can be done by assigning the\n  <span>activation</span> parameter the value of <span>'relu'</span>.\n</p>\n",
        "\n<p>\n  As well, we also have to specify an <span>input_shape</span> parameter, which\n  will allow the <span>Conv2D</span> layer to know what to expect in terms of\n  input. For this scenario, we want to specify a tuple\n  <span>(224, 224, 3)</span>, which contains the image dimensions followed by\n  the three channels, RGB\u2014one for each color channel in the images.\n</p>\n",
        "\n<p>\n  We want to use He normal initialization for the first layer. To do that we\n  need to set the <span>kernel_initializer</span> parameter as\n  <span>'he_normal'</span>.\n</p>\n",
        "\n<p>\n  Next, we want a max pooling layer, specified by <span>MaxPooling2D</span> in\n  Keras.\n</p>\n",
        "\n<p>\n  When we get to the flatten layer, we need to use\n  <span>tf.keras.layers.Flatten()</span>.\n</p>\n",
        "\n<p>\n  When we get to the first dense layer, we need to use <span>Dense</span> in\n  Keras.\n</p>\n",
        "\n<p>\n  Finally, the output layer will be a dense layer as well. It'll have a single\n  neuron, a sigmoid activation, and use\n  <span>'glorot_normal'</span> initialization.\n</p>\n",
        "\n<p>\n  Once the model is defined, we need to compile the model with an optimizer, a\n  loss, and a metric that we want to monitor during training.\n</p>\n",
        "\n<p>\n  To do that, we can use the <span>compile</span> function on the model. It\n  takes in an <span>optimizer</span> (in our case, Adam), a\n  <span>BinaryCrossentropy()</span> as its <span>loss</span>, and\n  <span>['binary_accuracy']</span> as its <span>metrics</span>.\n</p>"
    ],
    "spaceTime": "",
    "notes": "",
    "isSlowExecution": true,
    "isLongOutput": false,
    "visualization": {
        "inputType": null,
        "outputType": null
    },
    "resources": {
        "python": {
            "language": "python",
            "solutionsDisabled": false,
            "startingCode": "import tensorflow as tf\n\n\ndef classify_trucks():\n    # Write your code here.\n    pass\n",
            "solutions": [
                "# Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\nimport tensorflow as tf\n\n\ndef classify_trucks():\n    model = tf.keras.models.Sequential(\n        [\n            tf.keras.layers.Conv2D(\n                16, (3, 3), activation=\"relu\", input_shape=(224, 224, 3), kernel_initializer=\"he_normal\"\n            ),\n            tf.keras.layers.MaxPooling2D((2, 2)),\n            tf.keras.layers.Conv2D(32, (3, 3), activation=\"relu\", kernel_initializer=\"he_normal\"),\n            tf.keras.layers.MaxPooling2D((2, 2)),\n            tf.keras.layers.Conv2D(64, (3, 3), activation=\"relu\", kernel_initializer=\"he_normal\"),\n            tf.keras.layers.Flatten(),\n            tf.keras.layers.Dense(20, activation=\"relu\", kernel_initializer=\"he_normal\"),\n            tf.keras.layers.Dense(1, activation=\"sigmoid\", kernel_initializer=\"glorot_normal\"),\n        ]\n    )\n\n    model.compile(\n        optimizer=tf.keras.optimizers.Adam(learning_rate=0.01),\n        loss=tf.keras.losses.BinaryCrossentropy(),\n        metrics=[\"binary_accuracy\"],\n    )\n\n    return model\n"
            ],
            "sandboxCode": "# This file is initialized with a code version of some of\n# this question's test cases. Feel free to add, edit, or\n# remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        pass\n",
            "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        pass\n"
        }
    },
    "customInputVars": [],
    "tests": [],
    "jsonTests": [],
    "changelog": []
}