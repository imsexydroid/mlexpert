{
    "uid": "distances-and-similarities",
    "testStrategy": "JSON",
    "name": "Distance And Similarities",
    "version": 0,
    "releaseDate": "2023-04-08T00:00:00Z",
    "category": "Math Concepts",
    "difficulty": 0,
    "acl": {
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "mlexpert"
        ],
        "isAvailable": true
    },
    "languagesSupported": [
        "python"
    ],
    "submissionStatistics": {
        "correctCount": 487,
        "failureCount": 144
    },
    "assessmentSummary": null,
    "video": {
        "vimeoId": "810395809",
        "duration": 0,
        "annotations": [],
        "instructor": "Ryan Doan",
        "overviewTime": 0,
        "codeWalkthroughTime": 172
    },
    "prompt": "<div class=\"html\">\n<p>\n  Write a series of functions that take in two lists, X = x_1 ... x_n and\n  Y = y_1 ... y_n and return a list containing:\n</p>\n<ul>\n  <li>Firstly, the Euclidean distance between X and Y.</li>\n  <li>Secondly, the Manhattan distance between X and Y.</li>\n  <li>Thirdly, the Cosine similarity of X and Y.</li>\n  <li>Finally, the Jaccard similarity of X and Y.</li>\n</ul>\n<p>Note that:</p>\n<ul>\n  <li>You shouldn't use any libraries.</li>\n  <li>\n    Your output values will automatically be rounded to the fourth decimal.\n  </li>\n  <li>\n    X and Y will consist of positive integers up to 1000.\n  </li>\n  <li>\n    X and Y will have cardinalities between 1 and 10 inclusive.\n  </li>\n</ul>\n<p></p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">X</span> = [1, 3, 4, 5]\n<span class=\"CodeEditor-promptParameter\">Y</span> = [7, 6, 3, 1]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[7.874, 14, 0.6034, 0.3333]\n</pre>\n</div>",
    "hints": [
        "<p>\n  Let\u2019s start by implementing the Metrics class which will calculate all the required\n  similarities and distances. We'll start with euclidean_distance. Euclidean distance\n  is the rooted sum of squared differences per element in X and Y.\n</p>\n",
        "\n<p>\n  Next up, the Manhattan distance is the sum of absolute differences per element in X and Y\n</p>\n",
        "\n<p>\n  Then, we can move on to similarities and begin with cosine similarity. Cosine similarity\n  is the normalized dot product between X and Y. The dot product is the sum of the\n  element wise multiplication of X and Y. To normalize, we divide the dot product by\n  the multiplying together X and Y\u2019s Euclidean norms. The Euclidean norm of a vector is\n  the root of the sum of each squared element.\n</p>\n",
        "\n<p>\n  The final similarity metric to calculate is the Jaccard similarity. This is\n  calculated by taking the cardinality of the intersection of X and Y and dividing\n  by the cardinality of the union of X and Y.\n</p>"
    ],
    "spaceTime": "",
    "notes": "",
    "isSlowExecution": false,
    "isLongOutput": false,
    "visualization": {
        "inputType": null,
        "outputType": null
    },
    "resources": {
        "python": {
            "language": "python",
            "solutionsDisabled": false,
            "startingCode": "class Metrics():\n   def euclidean_distance(self, X, Y):\n       # Write your code here.\n       pass\n\n   def manhattan_distance(self, X, Y):\n       # Write your code here.\n       pass\n\n   def cosine_similarity(self, X, Y):\n       # Write your code here.\n       pass\n\n   def jaccard_similarity(self, X, Y):\n       # Write your code here.\n       pass\n\n\ndef distances_and_similarities(X, Y):\n   metrics = Metrics()\n   return [metrics.euclidean_distance(X, Y),\n           metrics.manhattan_distance(X, Y),\n           metrics.cosine_similarity(X, Y),\n           metrics.jaccard_similarity(X, Y)]\n",
            "solutions": [
                "# Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\nfrom math import pow, sqrt\n\nclass Metrics():\n   def euclidean_distance(self, X, Y):\n       return sqrt(sum(pow(x - y, 2) for x, y in zip(X, Y)))\n\n   def manhattan_distance(self, X, Y):\n       return sum(abs(x - y) for x, y in zip(X, Y))\n\n   def cosine_similarity(self, X, Y):\n       numerator = sum(x * y for x, y in zip(X, Y))\n       denominator = sqrt(sum([x * x for x in X])) * sqrt(sum([y * y for y in Y]))\n       return numerator / float(denominator)\n\n   def jaccard_similarity(self, X, Y):\n       intersection_cardinality = len(set.intersection(*[set(X), set(Y)]))\n       union_cardinality = len(set.union(*[set(X), set(Y)]))\n       return intersection_cardinality / float(union_cardinality)\n\n\ndef distances_and_similarities(X, Y):\n   similarity = Metrics()\n   return [similarity.euclidean_distance(X, Y),\n           similarity.manhattan_distance(X, Y),\n           similarity.cosine_similarity(X, Y),\n           similarity.jaccard_similarity(X, Y)]\n"
            ],
            "sandboxCode": "# This file is initialized with a code version of some of\n# this question's test cases. Feel free to add, edit, or\n# remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        X = [1, 3, 4, 5]\n        Y = [7, 6, 3, 1]\n        expected = [7.874, 14, 0.6034, 0.3333]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_2(self):\n        X = [1, 1, 2, 5, 6]\n        Y = [1, 2, 3, 5, 7, 9]\n        expected = [1.7321, 3, 0.7142, 0.4286]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_3(self):\n        X = [111, 367, 414, 144, 143, 123, 232, 132]\n        Y = [211, 267, 314, 244, 43, 223, 132, 232]\n        expected = [282.8427, 800, 0.9066, 0.1429]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_4(self):\n        X = [1]\n        Y = [1]\n        expected = [0.0, 0, 1.0, 1.0]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_5(self):\n        X = [1, 1]\n        Y = [1, 1]\n        expected = [0.0, 0, 1.0, 1.0]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_6(self):\n        X = [1, 1, 1]\n        Y = [1, 1, 1]\n        expected = [0.0, 0, 1.0, 1.0]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_7(self):\n        X = [1, 2, 3]\n        Y = [3, 2, 1]\n        expected = [2.8284, 4, 0.7143, 1.0]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_8(self):\n        X = [10, 100, 1000]\n        Y = [1, 10, 100]\n        expected = [904.5336, 999, 1.0, 0.5]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_9(self):\n        X = [12, 15, 27, 88, 11, 34, 24]\n        Y = [7, 6, 3, -1]\n        expected = [92.7524, 127, 0.1657, 0.0]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_10(self):\n        X = [3, 5, 4, 1]\n        Y = [6, 7, 3, 1]\n        expected = [3.7417, 6, 0.9482, 0.3333]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_11(self):\n        X = [1, 1]\n        Y = [1]\n        expected = [0.0, 0, 0.7071, 1.0]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_12(self):\n        X = [2]\n        Y = [2, 2]\n        expected = [0.0, 0, 0.7071, 1.0]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n\n\ndef round_output_values(results):\n    if type(results) is not list:\n        # Bad output; let tests fail.\n        return results\n    return [round_to_4(result) for result in results]\n\n\ndef round_to_4(number):\n    if not is_number(number):\n        # Bad output; let tests fail.\n        return number\n\n    return round(number, 4)\n\n\ndef is_number(element):\n    return type(element) in (int, float)\n",
            "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        X = [1, 3, 4, 5]\n        Y = [7, 6, 3, 1]\n        expected = [7.874, 14, 0.6034, 0.3333]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_2(self):\n        X = [1, 1, 2, 5, 6]\n        Y = [1, 2, 3, 5, 7, 9]\n        expected = [1.7321, 3, 0.7142, 0.4286]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_3(self):\n        X = [111, 367, 414, 144, 143, 123, 232, 132]\n        Y = [211, 267, 314, 244, 43, 223, 132, 232]\n        expected = [282.8427, 800, 0.9066, 0.1429]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_4(self):\n        X = [1]\n        Y = [1]\n        expected = [0.0, 0, 1.0, 1.0]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_5(self):\n        X = [1, 1]\n        Y = [1, 1]\n        expected = [0.0, 0, 1.0, 1.0]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_6(self):\n        X = [1, 1, 1]\n        Y = [1, 1, 1]\n        expected = [0.0, 0, 1.0, 1.0]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_7(self):\n        X = [1, 2, 3]\n        Y = [3, 2, 1]\n        expected = [2.8284, 4, 0.7143, 1.0]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_8(self):\n        X = [10, 100, 1000]\n        Y = [1, 10, 100]\n        expected = [904.5336, 999, 1.0, 0.5]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_9(self):\n        X = [12, 15, 27, 88, 11, 34, 24]\n        Y = [7, 6, 3, -1]\n        expected = [92.7524, 127, 0.1657, 0.0]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_10(self):\n        X = [3, 5, 4, 1]\n        Y = [6, 7, 3, 1]\n        expected = [3.7417, 6, 0.9482, 0.3333]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_11(self):\n        X = [1, 1]\n        Y = [1]\n        expected = [0.0, 0, 0.7071, 1.0]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n    def test_case_12(self):\n        X = [2]\n        Y = [2, 2]\n        expected = [0.0, 0, 0.7071, 1.0]\n        actual = program.distances_and_similarities(X, Y)\n        self.assertEqual(round_output_values(actual), expected)\n\n\ndef round_output_values(results):\n    if type(results) is not list:\n        # Bad output; let tests fail.\n        return results\n    return [round_to_4(result) for result in results]\n\n\ndef round_to_4(number):\n    if not is_number(number):\n        # Bad output; let tests fail.\n        return number\n\n    return round(number, 4)\n\n\ndef is_number(element):\n    return type(element) in (int, float)\n"
        }
    },
    "customInputVars": [
        {
            "name": "X",
            "example": [
                1,
                3,
                4,
                5
            ],
            "schema": {
                "type": "array"
            }
        },
        {
            "name": "Y",
            "example": [
                7,
                6,
                3,
                1
            ],
            "schema": {
                "type": "array"
            }
        }
    ],
    "tests": [
        {
            "X": [
                1,
                3,
                4,
                5
            ],
            "Y": [
                7,
                6,
                3,
                1
            ]
        },
        {
            "X": [
                1,
                1,
                2,
                5,
                6
            ],
            "Y": [
                1,
                2,
                3,
                5,
                7,
                9
            ]
        },
        {
            "X": [
                111,
                367,
                414,
                144,
                143,
                123,
                232,
                132
            ],
            "Y": [
                211,
                267,
                314,
                244,
                43,
                223,
                132,
                232
            ]
        },
        {
            "X": [
                1
            ],
            "Y": [
                1
            ]
        },
        {
            "X": [
                1,
                1
            ],
            "Y": [
                1,
                1
            ]
        },
        {
            "X": [
                1,
                1,
                1
            ],
            "Y": [
                1,
                1,
                1
            ]
        },
        {
            "X": [
                1,
                2,
                3
            ],
            "Y": [
                3,
                2,
                1
            ]
        },
        {
            "X": [
                10,
                100,
                1000
            ],
            "Y": [
                1,
                10,
                100
            ]
        },
        {
            "X": [
                12,
                15,
                27,
                88,
                11,
                34,
                24
            ],
            "Y": [
                7,
                6,
                3,
                -1
            ]
        },
        {
            "X": [
                3,
                5,
                4,
                1
            ],
            "Y": [
                6,
                7,
                3,
                1
            ]
        },
        {
            "X": [
                1,
                1
            ],
            "Y": [
                1
            ]
        },
        {
            "X": [
                2
            ],
            "Y": [
                2,
                2
            ]
        }
    ],
    "jsonTests": [
        {
            "X": [
                1,
                3,
                4,
                5
            ],
            "Y": [
                7,
                6,
                3,
                1
            ]
        },
        {
            "X": [
                1,
                1,
                2,
                5,
                6
            ],
            "Y": [
                1,
                2,
                3,
                5,
                7,
                9
            ]
        },
        {
            "X": [
                111,
                367,
                414,
                144,
                143,
                123,
                232,
                132
            ],
            "Y": [
                211,
                267,
                314,
                244,
                43,
                223,
                132,
                232
            ]
        },
        {
            "X": [
                1
            ],
            "Y": [
                1
            ]
        },
        {
            "X": [
                1,
                1
            ],
            "Y": [
                1,
                1
            ]
        },
        {
            "X": [
                1,
                1,
                1
            ],
            "Y": [
                1,
                1,
                1
            ]
        },
        {
            "X": [
                1,
                2,
                3
            ],
            "Y": [
                3,
                2,
                1
            ]
        },
        {
            "X": [
                10,
                100,
                1000
            ],
            "Y": [
                1,
                10,
                100
            ]
        },
        {
            "X": [
                12,
                15,
                27,
                88,
                11,
                34,
                24
            ],
            "Y": [
                7,
                6,
                3,
                -1
            ]
        },
        {
            "X": [
                3,
                5,
                4,
                1
            ],
            "Y": [
                6,
                7,
                3,
                1
            ]
        },
        {
            "X": [
                1,
                1
            ],
            "Y": [
                1
            ]
        },
        {
            "X": [
                2
            ],
            "Y": [
                2,
                2
            ]
        }
    ],
    "changelog": []
}