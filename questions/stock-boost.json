{
    "uid": "stock-boost",
    "testStrategy": "DATA_PROCESSING",
    "name": "Stock Boost",
    "version": 0,
    "releaseDate": "2023-04-08T00:00:00Z",
    "category": "Model Applications",
    "difficulty": 0,
    "acl": {
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "mlexpert"
        ],
        "isAvailable": true
    },
    "languagesSupported": [
        "python"
    ],
    "submissionStatistics": {
        "correctCount": 184,
        "failureCount": 11
    },
    "assessmentSummary": null,
    "video": {
        "vimeoId": "810396601",
        "duration": 0,
        "annotations": [],
        "instructor": "Ryan Doan",
        "overviewTime": 0,
        "codeWalkthroughTime": 334
    },
    "prompt": "<div class=\"html\">\n<p>\n  Daily historical stock prices from Alphabet, Meta, Exxon, Chevron, Berkshire Hathaway,\n  JP Morgan, Johnson and Johnson, UnitedHealth Group, Apple, Microsoft, Union Pacific,\n  Boeing, DuPont, Sherwin-Williams, American Tower, Simon Property, Coca-Cola,\n  Procter & Gamble, Duke Energy, Consolidated Edison, Amazon, and McDonalds has\n  been gathered. The following features have been generated for each day for each stock:\n</p>\n<ul>\n  <li>\n    (index): This is a unique identifier per training and test example and should not be used as a feature.\n  </li>\n  <li>\n    ADL: The accumulation/distribution (A/D) line gauges supply and demand of an asset or security by looking at where the price closed within the period\u2019s range and then multiplying that by volume.\n  </li>\n  <li>\n    DEMA: The double exponential moving average (DEMA) is a\u00a0technical indicator\u00a0devised to reduce the lag in the results produced by a traditional moving average. Technical traders use it to lessen the amount of \"noise\" that can distort the movements on a price chart.\n  </li>\n  <li>\n    RSI: The relative strength index (RSI) is a\u00a0momentum indicator\u00a0used in technical analysis. RSI measures the speed and magnitude of a security's recent price changes to evaluate\u00a0overvalued\u00a0or\u00a0undervalued\u00a0conditions in the price of that security.\n  </li>\n  <li>\n    POSC: The Price oscillator (POSC) is a technical\u00a0momentum indicator\u00a0that shows the relationship between two moving averages in percentage terms. The POSC is used to compare asset performance and volatility, spot\u00a0divergence\u00a0that could lead to price reversals, generate trade signals, and help confirm trend direction.\n  </li>\n  <li>\n    Month: This is the integer month of the year in which the above features were generated from historical prices. This is important to include because it provides information to the model based on seasonality.\n  </li>\n  <li>\n    Sector: Sector is one of 11 categories including: Communications, Discretionary, Energy, Financials, Healthcare, Industrials, IT, Materials, Real Estate (RE), Staples, Utilities. Each stock included in the dataset falls into one of these categories. Sector is an important feature to include because different sectors behave differently from one another.\n  </li>\n</ul>\n\n<p>These features have been aggregated into a Pandas dataframe called <span>X_train</span>:</p>\n<pre>\n+--------+--------+----------+--------+----+\n| (index)|     adl|      dema|     rsi| ...\n+--------+--------+----------+--------+----+\n|       0| 7098904| 2766.4112| 77.5119| ...\n|       1| 6447253| 2760.4640| 65.9861| ...\n|       2| 3764637| 2750.4837| 64.4815| ...\n|       3| 3566283| 2745.2754| 64.8126| ...\n|       4| 3386651| 2726.6922| 59.8288| ...\n|       5| 4347448| 2724.4973| 61.6772| ...\n<span class=\"CodeEditor-promptComment\"># ...</span>\n<span class=\"CodeEditor-promptComment\"># More of the same kind of data.</span>\n</pre>\n<p><span>X_train</span> features are paired with a binary label. The labels, referenced as a <span>buy_signal</span> is <span>1</span> if the 10-day percentage in price change is greater than 5% and is otherwise <span>0</span>.\nThese labels have been put into the <span>y_train</span> dataframe:</p>\n<pre>\n+--------+-----------+\n| (index)| buy_signal|\n+--------+-----------+\n|       0|          0|\n|       1|          1|\n|       2|          1|\n|       3|          0|\n|       4|          1|\n|       5|          1|\n<span class=\"CodeEditor-promptComment\"># ...</span>\n<span class=\"CodeEditor-promptComment\"># More of the same kind of data.</span>\n</pre>\n\n<p>\n  For modeling, you will use.\n  <a\n    class=\"Link Link--mle\"\n    href=https://xgboost.readthedocs.io/en/stable/python/python_api.html\"\n    target=\"_blank\"\n    >XGBoost</a\n  > to perform binary classification.\n</p>\n\n<p>\n  Your function will train on <span>X_train</span>, tune on <span>y_train</span>\n  and predict on <span>X_test</span> by returning a Pandas dataframe that has the\n  predicted labels, generated by your XGBoost model, for each sample in X_test:\n</p>\n<pre>\n+--------+-----------+\n| (index)| buy_signal|\n+--------+-----------+\n|    4033|          0|\n|      57|          0|\n|    3669|          0|\n|    2843|          0|\n|    4664|          0|\n|    3303|          0|\n<span class=\"CodeEditor-promptComment\"># ...</span>\n<span class=\"CodeEditor-promptComment\"># More of the same kind of data.</span>\n</pre>\n<p>Your model will need to have at least a 70% accuracy but should aim for a 90% accuracy.</p>",
    "hints": [
        "<p>\n  First, we need to load our train and test data into the <span>DMatrix</span>\n  data type so we can use XGBoost. We have to be sure to enable categorical data\n  for the created <span>DMatrix</span> to account for the categorical feature, <span>Sector</span>.\n</p>\n",
        "\n<p>\n  Then, we need to define our model configuration and our training set. Using XGBoost,\n  we can define which objective function we want to use, which tree method we want\n  to use, which learning rate we want, which max depth we want for our boosted trees,\n  and finally how many categories of <span>Sector</span> we have. Tuning these variables\n  will allow us to achieve better model performance.\n</p>\n",
        "\n<p>\n  Lastly, we need to add our predictions to a dataframe which matches the corresponding\n  indices to our predictions. We can return this dataframe for performance evaluation.\n</p>"
    ],
    "spaceTime": "",
    "notes": "",
    "isSlowExecution": true,
    "isLongOutput": false,
    "visualization": {
        "inputType": null,
        "outputType": null
    },
    "resources": {
        "python": {
            "language": "python",
            "solutionsDisabled": false,
            "startingCode": "import xgboost as xgb\n\ndef stock_boost(X_train, y_train, X_test):\n    # Write your code here\n    pass\n",
            "solutions": [
                "# Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\nimport xgboost as xgb\n\ndef stock_boost(X_train, y_train, X_test):\n    d_train = xgb.DMatrix(X_train, label=y_train, enable_categorical=True)\n    d_test = xgb.DMatrix(X_test, enable_categorical=True)\n    stock_boost_model = xgb.train({\"objective\": \"binary:logistic\",\n                                    \"tree_method\": \"exact\",\n                                    \"max_cat_to_onehot\": 11,\n                                    \"eta\": .32,\n                                    \"max_depth\": 7}, d_train)\n    raw_predictions = stock_boost_model.predict(d_test)\n    threshold_predictions = [1 if value > 0.44 else 0 for value in raw_predictions]\n    X_test['buy_signal'] = threshold_predictions\n    y_test_predictions = X_test[['buy_signal']].copy()\n    X_test.drop('buy_signal', axis=1, inplace=True)\n    return y_test_predictions\n"
            ],
            "sandboxCode": "# This file is initialized with a code version of some of\n# this question's test cases. Feel free to add, edit, or\n# remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        pass\n",
            "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        pass\n"
        }
    },
    "customInputVars": [],
    "tests": [],
    "jsonTests": [],
    "changelog": []
}