{
    "uid": "get-statistics",
    "testStrategy": "JSON",
    "name": "Get Statistics",
    "version": 0,
    "releaseDate": "2021-05-24T00:00:00Z",
    "category": "Math Concepts",
    "difficulty": 0,
    "acl": {
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "mlexpert"
        ],
        "isAvailable": true
    },
    "languagesSupported": [
        "python"
    ],
    "submissionStatistics": {
        "correctCount": 1690,
        "failureCount": 762
    },
    "assessmentSummary": null,
    "video": {
        "vimeoId": "552659484",
        "duration": 0,
        "annotations": [],
        "instructor": "Ryan Doan",
        "overviewTime": 0,
        "codeWalkthroughTime": 229
    },
    "prompt": "<div class=\"html\">\n<p>\n  Write a function that takes in a list of numbers and returns a dictionary\n  containing the following statistics about the numbers: the mean, median, mode,\n  sample variance, sample standard deviation, and 95% confidence interval for\n  the mean.\n</p>\n<p>Note that:</p>\n<ul>\n  <li>\n    You can assume that the given list contains a large-enough number of samples\n    from a population to use a z-score of <span>1.96</span>.\n  </li>\n  <li>If there's more than one mode, your function can return any of them.</li>\n  <li>You shouldn't use any libraries.</li>\n  <li>\n    Your output values will automatically be rounded to the fourth decimal.\n  </li>\n</ul>\n<p></p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">input_list</span> = [2, 1, 3, 4, 4, 5, 6, 7]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n{\n  \"mean\": 4.0,\n  \"median\": 4.0,\n  \"mode\": 4.0,\n  \"sample_variance\": 4.0,\n  \"sample_standard_deviation\": 2.0,\n  \"mean_confidence_interval\": [2.6141, 5.3859],\n}\n</pre>\n</div>",
    "hints": [
        "<p>The mean is the sum of the values divided by the number of values.</p>\n",
        "\n<p>\n  The median is the middle value of the sorted values. If the input list has an\n  even number of elements, the median is the average of the two middle values.\n</p>\n<p>\n  Naturally, you'll first have to sort the input list, and you'll then have to\n  find the middle index (or the two middle indices if the list has an even\n  number of elements).\n</p>\n",
        "\n<p>The mode is the most frequent element in the input list.</p>\n<p>You'll have to count how many times each value appears in the list.</p>\n",
        "\n<p>\n  What's the difference between a sample variance and a population variance?\n</p>\n",
        "\n<p>\n  The variance of a sample is the sum of the squared differences between each\n  element and the mean of the elements. Each term in the sum is divided by the\n  number of input elements minus 1.\n</p>\n",
        "\n<p>The sample standard deviation is the square root of the sample variance.</p>\n",
        "\n<p>\n  To find the 95% confidence interval of the mean, you first need to find the\n  z-score of 95%, which is <span>1.96</span> assuming a two-tailed distribution.\n</p>\n<p>\n  This <span>1.96</span> is then multiplied by the standard error, which is the\n  standard deviation divided by the square root of the number of input elements.\n</p>\n<p>\n  Finally, the lower end of the confidence interval is obtained by subtracting\n  <span>1.96 * standard_error</span> from the mean, and the upper end is\n  obtained by adding <span>1.96 * standard_error</span> to the mean.\n</p>"
    ],
    "spaceTime": "",
    "notes": "",
    "isSlowExecution": false,
    "isLongOutput": false,
    "visualization": {
        "inputType": null,
        "outputType": null
    },
    "resources": {
        "python": {
            "language": "python",
            "solutionsDisabled": false,
            "startingCode": "def get_statistics(input_list):\n    # Write your code here.\n    return {\n        \"mean\": 0,\n        \"median\": 0,\n        \"mode\": 0,\n        \"sample_variance\": 0,\n        \"sample_standard_deviation\": 0,\n        \"mean_confidence_interval\": [0, 0],\n    }\n",
            "solutions": [
                "# Copyright \u00a9 2023 AlgoExpert LLC. All rights reserved.\n\ndef get_statistics(input_list):\n    sorted_input = sorted(input_list)\n    input_length = len(sorted_input)\n\n    mean = sum(sorted_input) / input_length\n\n    middle_idx = (len(sorted_input) - 1) // 2\n    median = sorted_input[middle_idx]\n\n    if input_length % 2 == 0:\n        middle_number_1 = sorted_input[middle_idx]\n        middle_number_2 = sorted_input[middle_idx + 1]\n        median = (middle_number_1 + middle_number_2) / 2\n\n    number_counts = {x: sorted_input.count(x) for x in set(sorted_input)}\n    mode = max(number_counts.keys(), key=lambda unique_number: number_counts[unique_number])\n\n    sample_variance = sum([(number - mean) ** 2 / (input_length - 1) for number in sorted_input])\n\n    sample_standard_deviation = sample_variance ** 0.5\n\n    mean_standard_error = sample_standard_deviation / input_length ** 0.5\n    z_score_standard_error = 1.96 * mean_standard_error\n    mean_confidence_interval = [mean - z_score_standard_error, mean + z_score_standard_error]\n\n    return {\n        \"mean\": mean,\n        \"median\": median,\n        \"mode\": mode,\n        \"sample_variance\": sample_variance,\n        \"sample_standard_deviation\": sample_standard_deviation,\n        \"mean_confidence_interval\": mean_confidence_interval,\n    }\n"
            ],
            "sandboxCode": "# This file is initialized with a code version of some of\n# this question's test cases. Feel free to add, edit, or\n# remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [2, 1, 3, 4, 4, 5, 6, 7]\n        expected = {\n            \"mean\": 4.0,\n            \"median\": 4.0,\n            \"mode\": 4.0,\n            \"sample_variance\": 4.0,\n            \"sample_standard_deviation\": 2.0,\n            \"mean_confidence_interval\": [2.6141, 5.3859],\n        }\n        actual = program.get_statistics(input)\n        self.assertEqual(round_output_values(actual), expected)\n\n    def test_case_2(self):\n        input = [2, 3, 4, 5, 6, 7, 8, 8, 8, 1, 1, 1, 10, 10, 10, 11, 12, 12, 12]\n        expected = {\n            \"mean\": 6.8947,\n            \"median\": 8.0,\n            \"mode\": 1.0,\n            \"sample_variance\": 15.7661,\n            \"sample_standard_deviation\": 3.9707,\n            \"mean_confidence_interval\": [5.1093, 8.6802],\n        }\n        actual = program.get_statistics(input)\n        self.assertEqual(round_output_values(actual), expected)\n\n    def test_case_3(self):\n        input = [0, 1]\n        expected = {\n            \"mean\": 0.5,\n            \"median\": 0.5,\n            \"mode\": 0.0,\n            \"sample_variance\": 0.5000,\n            \"sample_standard_deviation\": 0.7071,\n            \"mean_confidence_interval\": [-0.48, 1.48],\n        }\n        actual = program.get_statistics(input)\n        self.assertEqual(round_output_values(actual), expected)\n\n\ndef round_output_values(stats):\n    if type(stats) is not dict:\n        # Bad output; let tests fail.\n        return stats\n\n    new_output = {}\n    for key in stats.keys():\n        new_output[key] = stats[key]\n\n        if type(stats[key]) is list:\n            if len(stats[key]) >= 1:\n                new_output[key][0] = round_to_4(stats[key][0])\n            if len(stats[key]) >= 2:\n                new_output[key][1] = round_to_4(stats[key][1])\n        else:\n            new_output[key] = round_to_4(stats[key])\n\n    return new_output\n\n\ndef round_to_4(number):\n    if not is_number(number):\n        # Bad output; let tests fail.\n        return number\n\n    return round(number, 4)\n\n\ndef is_number(element):\n    return type(element) in (int, float)\n",
            "unitTests": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        input = [2, 1, 3, 4, 4, 5, 6, 7]\n        expected = {\n            \"mean\": 4.0,\n            \"median\": 4.0,\n            \"mode\": 4.0,\n            \"sample_variance\": 4.0,\n            \"sample_standard_deviation\": 2.0,\n            \"mean_confidence_interval\": [2.6141, 5.3859],\n        }\n        actual = program.get_statistics(input)\n        self.assertEqual(round_output_values(actual), expected)\n\n    def test_case_2(self):\n        input = [2, 3, 4, 5, 6, 7, 8, 8, 8, 1, 1, 1, 10, 10, 10, 11, 12, 12, 12]\n        expected = {\n            \"mean\": 6.8947,\n            \"median\": 8.0,\n            \"mode\": 1.0,\n            \"sample_variance\": 15.7661,\n            \"sample_standard_deviation\": 3.9707,\n            \"mean_confidence_interval\": [5.1093, 8.6802],\n        }\n        actual = program.get_statistics(input)\n        self.assertEqual(round_output_values(actual), expected)\n\n    def test_case_3(self):\n        input = [0, 1]\n        expected = {\n            \"mean\": 0.5,\n            \"median\": 0.5,\n            \"mode\": 0.0,\n            \"sample_variance\": 0.5000,\n            \"sample_standard_deviation\": 0.7071,\n            \"mean_confidence_interval\": [-0.48, 1.48],\n        }\n        actual = program.get_statistics(input)\n        self.assertEqual(round_output_values(actual), expected)\n\n\ndef round_output_values(stats):\n    if type(stats) is not dict:\n        # Bad output; let tests fail.\n        return stats\n\n    new_output = {}\n    for key in stats.keys():\n        new_output[key] = stats[key]\n\n        if type(stats[key]) is list:\n            if len(stats[key]) >= 1:\n                new_output[key][0] = round_to_4(stats[key][0])\n            if len(stats[key]) >= 2:\n                new_output[key][1] = round_to_4(stats[key][1])\n        else:\n            new_output[key] = round_to_4(stats[key])\n\n    return new_output\n\n\ndef round_to_4(number):\n    if not is_number(number):\n        # Bad output; let tests fail.\n        return number\n\n    return round(number, 4)\n\n\ndef is_number(element):\n    return type(element) in (int, float)\n"
        }
    },
    "customInputVars": [
        {
            "name": "input_list",
            "example": [
                2,
                1,
                3,
                4,
                4,
                5,
                6,
                7
            ],
            "schema": {
                "items": {
                    "type": "integer"
                },
                "type": "array"
            }
        }
    ],
    "tests": [
        {
            "input_list": [
                2,
                1,
                3,
                4,
                4,
                5,
                6,
                7
            ]
        },
        {
            "input_list": [
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                8,
                1,
                1,
                1,
                10,
                10,
                10,
                11,
                12,
                12,
                12
            ]
        },
        {
            "input_list": [
                0,
                1
            ]
        },
        {
            "input_list": [
                13,
                14,
                17,
                2,
                16,
                17,
                1,
                15,
                4,
                18,
                7,
                6,
                11,
                18,
                18,
                6,
                12,
                3,
                6
            ]
        },
        {
            "input_list": [
                13,
                7,
                13,
                7,
                19,
                11,
                9,
                17,
                7,
                5,
                15,
                7,
                5,
                18,
                13,
                20,
                2,
                8,
                14,
                0,
                1,
                1
            ]
        },
        {
            "input_list": [
                3,
                12,
                18,
                12,
                20,
                8,
                18,
                6,
                4,
                8,
                4,
                4,
                11,
                1,
                20,
                15,
                11,
                17,
                19,
                10,
                7,
                18,
                14,
                9,
                20,
                11,
                14,
                12,
                9,
                3,
                4,
                7,
                5,
                9,
                20,
                4,
                0,
                13,
                1,
                17,
                15,
                5
            ]
        },
        {
            "input_list": [
                15,
                4,
                4,
                12,
                6,
                0,
                17,
                11,
                13,
                15,
                4
            ]
        },
        {
            "input_list": [
                8,
                19,
                20,
                5,
                9,
                3,
                3,
                6,
                18,
                18,
                16,
                8,
                10,
                5,
                12,
                1,
                0,
                7,
                3,
                19
            ]
        },
        {
            "input_list": [
                12,
                8,
                0,
                19,
                18,
                20,
                3,
                18,
                7,
                0,
                13,
                8,
                10,
                16,
                5,
                17,
                14,
                8,
                19,
                3,
                12,
                11,
                13,
                13,
                2,
                13,
                17,
                1,
                6,
                19,
                17,
                5,
                1,
                9,
                15,
                12,
                3,
                15,
                1,
                10,
                6,
                12
            ]
        },
        {
            "input_list": [
                8,
                10,
                1,
                18,
                19,
                15,
                13,
                7,
                6,
                7,
                15,
                0,
                0
            ]
        },
        {
            "input_list": [
                7,
                20
            ]
        },
        {
            "input_list": [
                17,
                19,
                20,
                18,
                9,
                17,
                1,
                3,
                2,
                4,
                1,
                7,
                3,
                9,
                17
            ]
        },
        {
            "input_list": [
                11,
                15,
                12,
                11,
                8,
                15,
                16,
                5,
                11,
                7,
                2,
                20,
                3,
                5,
                0,
                16,
                17,
                19,
                10,
                20,
                5,
                1,
                7,
                15,
                2,
                15,
                18
            ]
        },
        {
            "input_list": [
                14,
                8,
                20,
                3,
                10,
                11,
                5,
                15,
                17,
                18,
                18,
                1,
                13,
                5,
                7,
                20,
                6,
                12,
                5,
                18,
                7,
                5,
                15,
                15,
                1,
                5,
                2,
                11,
                10,
                18,
                2,
                11,
                9,
                8,
                7,
                18,
                8,
                17,
                14,
                16,
                17,
                15,
                18,
                2,
                3
            ]
        },
        {
            "input_list": [
                19,
                14,
                0,
                8,
                10,
                13,
                1,
                5,
                1,
                9,
                14,
                3,
                10,
                4,
                0,
                2,
                20,
                3,
                8,
                19,
                14,
                11,
                4,
                10,
                18,
                19,
                6,
                16,
                9,
                2,
                7,
                2,
                1,
                18,
                0,
                3,
                1,
                6,
                20,
                15,
                14,
                10,
                5
            ]
        }
    ],
    "jsonTests": [
        {
            "input_list": [
                2,
                1,
                3,
                4,
                4,
                5,
                6,
                7
            ]
        },
        {
            "input_list": [
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                8,
                1,
                1,
                1,
                10,
                10,
                10,
                11,
                12,
                12,
                12
            ]
        },
        {
            "input_list": [
                0,
                1
            ]
        },
        {
            "input_list": [
                13,
                14,
                17,
                2,
                16,
                17,
                1,
                15,
                4,
                18,
                7,
                6,
                11,
                18,
                18,
                6,
                12,
                3,
                6
            ]
        },
        {
            "input_list": [
                13,
                7,
                13,
                7,
                19,
                11,
                9,
                17,
                7,
                5,
                15,
                7,
                5,
                18,
                13,
                20,
                2,
                8,
                14,
                0,
                1,
                1
            ]
        },
        {
            "input_list": [
                3,
                12,
                18,
                12,
                20,
                8,
                18,
                6,
                4,
                8,
                4,
                4,
                11,
                1,
                20,
                15,
                11,
                17,
                19,
                10,
                7,
                18,
                14,
                9,
                20,
                11,
                14,
                12,
                9,
                3,
                4,
                7,
                5,
                9,
                20,
                4,
                0,
                13,
                1,
                17,
                15,
                5
            ]
        },
        {
            "input_list": [
                15,
                4,
                4,
                12,
                6,
                0,
                17,
                11,
                13,
                15,
                4
            ]
        },
        {
            "input_list": [
                8,
                19,
                20,
                5,
                9,
                3,
                3,
                6,
                18,
                18,
                16,
                8,
                10,
                5,
                12,
                1,
                0,
                7,
                3,
                19
            ]
        },
        {
            "input_list": [
                12,
                8,
                0,
                19,
                18,
                20,
                3,
                18,
                7,
                0,
                13,
                8,
                10,
                16,
                5,
                17,
                14,
                8,
                19,
                3,
                12,
                11,
                13,
                13,
                2,
                13,
                17,
                1,
                6,
                19,
                17,
                5,
                1,
                9,
                15,
                12,
                3,
                15,
                1,
                10,
                6,
                12
            ]
        },
        {
            "input_list": [
                8,
                10,
                1,
                18,
                19,
                15,
                13,
                7,
                6,
                7,
                15,
                0,
                0
            ]
        },
        {
            "input_list": [
                7,
                20
            ]
        },
        {
            "input_list": [
                17,
                19,
                20,
                18,
                9,
                17,
                1,
                3,
                2,
                4,
                1,
                7,
                3,
                9,
                17
            ]
        },
        {
            "input_list": [
                11,
                15,
                12,
                11,
                8,
                15,
                16,
                5,
                11,
                7,
                2,
                20,
                3,
                5,
                0,
                16,
                17,
                19,
                10,
                20,
                5,
                1,
                7,
                15,
                2,
                15,
                18
            ]
        },
        {
            "input_list": [
                14,
                8,
                20,
                3,
                10,
                11,
                5,
                15,
                17,
                18,
                18,
                1,
                13,
                5,
                7,
                20,
                6,
                12,
                5,
                18,
                7,
                5,
                15,
                15,
                1,
                5,
                2,
                11,
                10,
                18,
                2,
                11,
                9,
                8,
                7,
                18,
                8,
                17,
                14,
                16,
                17,
                15,
                18,
                2,
                3
            ]
        },
        {
            "input_list": [
                19,
                14,
                0,
                8,
                10,
                13,
                1,
                5,
                1,
                9,
                14,
                3,
                10,
                4,
                0,
                2,
                20,
                3,
                8,
                19,
                14,
                11,
                4,
                10,
                18,
                19,
                6,
                16,
                9,
                2,
                7,
                2,
                1,
                18,
                0,
                3,
                1,
                6,
                20,
                15,
                14,
                10,
                5
            ]
        }
    ],
    "changelog": []
}